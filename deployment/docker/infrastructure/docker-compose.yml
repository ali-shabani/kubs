services:
  postgres:
    image: postgres:16.2
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 3s
      retries: 30
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - pg-vol:/var/lib/postgresql/data
      - ./pg/init-db:/docker-entrypoint-initdb.d
    networks:
      - blue-network

  db-migration:
    image: arigaio/atlas:0.22.0
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../../../db/migrations:/migrations:ro
    command:
      ["migrate", "apply", "--url", "$BUYNOW_DATABASE_URL?sslmode=disable"]
    networks:
      - blue-network

  redis:
    image: redis:7.2.4
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - redis-vol:/usr/local/etc/redis
    networks:
      - blue-network

  hasura:
    image: hasura/graphql-engine:v2.38.1
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 3s
      timeout: 3s
      retries: 5
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/hasura
      BUYNOW_DATABASE_URL: "$BUYNOW_DATABASE_URL"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: true
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
    networks:
      - blue-network

  hasura-metadata-apply:
    build:
      context: .
      dockerfile: ./hasura/Dockerfile
    image: buynow/hasura-metadata-apply
    environment:
      HASURA_ADMIN_SECRET: $HASURA_ADMIN_SECRET
    depends_on:
      hasura:
        condition: service_healthy
    volumes:
      - ../../../hasura:/hasura
    networks:
      - blue-network

  emqx:
    image: emqx:5.6.1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "emqx_ctl status | grep 'is running'"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      EMQX_LISTENERS__SSL__DEFAULT__SSL_OPTIONS__KEYFILE: "/etc/certs/$MQTT_DOMAIN.key"
      EMQX_LISTENERS__WSS__DEFAULT__SSL_OPTIONS__KEYFILE: "/etc/certs/$MQTT_DOMAIN.key"
      EMQX_LISTENERS__SSL__DEFAULT__SSL_OPTIONS__CERTFILE: "/etc/certs/$MQTT_DOMAIN.crt"
      EMQX_LISTENERS__WSS__DEFAULT__SSL_OPTIONS__CERTFILE: "/etc/certs/$MQTT_DOMAIN.crt"
    command:
      - sh
      - -c
      - |
        cp /tmp/emqx.conf /opt/emqx/data/configs/cluster.hocon
        /usr/bin/docker-entrypoint.sh /opt/emqx/bin/emqx foreground
    volumes:
      - ./emqx/emqx.conf:/tmp/emqx.conf
      - emqx_certs:/etc/certs
    networks:
      - blue-network

volumes:
  pg-vol:
    external: true
  redis-vol:
    external: true
  emqx_certs:
    external: true

networks:
  blue-network:
    external: true
