name: deploy
on: push

env:
  REGISTRY: ghcr.io
  MIGRATE_IMAGE_NAME: ${{ github.repository }}/db-migrate

jobs:
  build_image:
    name: build migate image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: create sha from migration
        run: |
          echo "MIGRATION_SHA=$(sha256sum db/migrations/atlas.sum | awk '{print $1}')" >> $GITHUB_ENV
          echo "APPLICABLE_MIGRATE_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ env.MIGRATION_SHA }}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.MIGRATE_IMAGE_NAME }}
          tags: type=raw,value=${{ env.MIGRATION_SHA }}

      - name: Check if image exists
        id: check_image
        run: |
          IMAGE_EXISTS=$(docker manifest inspect ${{ env.APPLICABLE_MIGRATE_IMAGE_NAME }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "::set-output name=exists::${IMAGE_EXISTS}"

      - name: Build and push
        if: steps.check_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./db
          file: ./db/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: deploy to cluster
    runs-on: ubuntu-latest
    # needs: build_image
    steps:
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - uses: actions/checkout@v4
      - name: deploy to cluster
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ vars.ARVAN_KUBE_VERSION }}

      - name: Apply kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.ARVAN_KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: create
        run: |
          echo REGISTERY_SECRET_GITHUB=$(echo -n '{"auths": {"${{ env.REGISTRY }}": {"username": "${{github.actor}}", "password": "${{ secrets.REGISTERY_PASSWORD }}"}}}' | base64 -w 0) >> $GITHUB_ENV

      - name: Run substitute-env-vars.sh script
        run: bash ./.github/scripts/substitute-env-vars.sh -d deployment -e "*/init-db.config.yaml"
        env:
          HOST: ${{ vars.HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          HASURA_ADMIN_SECRET: ${{ secrets.HASURA_ADMIN_SECRET }}

      - name: Apply all Kubernetes manifests in deployment folder
        run: |
          kubectl apply -f deployment/secrets/
          kubectl apply -f deployment/infrastructure/pg/
          kubectl apply -f deployment/infrastructure/hasura/
      # - name: create
      #   run: |
      #     kubectl delete secret github-packages --ignore-not-found
      #     kubectl create secret docker-registry github-packages \
      #     --docker-server=${{ env.REGISTRY }} \
      #     --docker-username=${{github.actor}} \
      #     --docker-password=${{ secrets.REGISTERY_PASSWORD }}

      # - name: Kubectl apply pg secrets
      #   run: |
      #     kubectl delete secret postgres-secret --ignore-not-found
      #     kubectl create secret generic postgres-secret \
      #     --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }}

      # - name: Kubectl apply pg
      #   run: kubectl apply -f deployment/infrastructure/pg/

      # - name: create pg.migrate.yaml manifest
      #   uses: danielr1996/envsubst-action@1.0.0
      #   env:
      #     MIGRATE_IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ github.run_number }}
      #   with:
      #     input: deployment/templates/pg.migrate.template.yaml
      #     output: pg.migrate.yaml

      # - name: run pg.migrate.yaml
      #   run: |
      #     kubectl apply -f pg.migrate.yaml
      #     kubectl wait --for=condition=complete job/db-migration --timeout=60s

      # - name: Kubectl apply hasura secrets
      #   run: |
      #     kubectl delete secret hasura-secret --ignore-not-found
      #     kubectl create secret generic hasura-secret \
      #     --from-literal=db-metadata-url=postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/hasura \
      #     --from-literal=admin-secret=${{ secrets.HASURA_ADMIN_SECRET }}

      # - name: kubeclt apply hasura
      #   run: |
      #     kubectl create configmap hasura-config \
      #     --from-literal=host=${{ vars.HASURA_HOST }}

      # - name: Kubectl apply hasura
      #   run: kubectl apply -f deployment/infrastructure/hasura/
