name: deploy
on: push

env:
  REGISTRY: ghcr.io
  MIGRATE_IMAGE_NAME: ${{ github.repository }}/db-migrate

jobs:
  build_image:
    name: build migate image
    runs-on: ubuntu-latest
    outputs:
      migrate_image_name: ${{ steps.set_output.outputs.migrate_image_name }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: create sha from migration
        run: |
          echo "MIGRATION_SHA=$(sha256sum db/migrations/atlas.sum | awk '{print $1}')" >> "$GITHUB_ENV"

      - name: extract applicable migrate image name
        run: |
          echo "APPLICABLE_MIGRATE_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ env.MIGRATION_SHA }}" >> "$GITHUB_ENV"

      - name: Set output
        id: set_output
        run: echo "migrate_image_name=${{ env.APPLICABLE_MIGRATE_IMAGE_NAME }}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.MIGRATE_IMAGE_NAME }}
          tags: type=raw,value=${{ env.MIGRATION_SHA }}

      - name: Check if image exists
        id: check_image
        run: |
          echo MIGRATION_SHA=${{ env.MIGRATION_SHA }}
          IMAGE_EXISTS=$(docker manifest inspect ${{ env.APPLICABLE_MIGRATE_IMAGE_NAME }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "image_exists=${IMAGE_EXISTS}" >> $GITHUB_OUTPUT

      - name: Build and push
        if: steps.check_image.outputs.image_exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./db
          file: ./db/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: deploy to cluster
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - name: lsdakj
        run: echo ${{ needs.build_image.outputs.migrate_image_name }}
  #     - name: Install envsubst
  #       run: sudo apt-get update && sudo apt-get install -y gettext-base

  #     - uses: actions/checkout@v4
  #     - name: deploy to cluster
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: ${{ vars.ARVAN_KUBE_VERSION }}

  #     - name: Apply kubeconfig
  #       run: |
  #         mkdir -p ~/.kube
  #         echo "${{ secrets.ARVAN_KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

  #     - name: create
  #       run: |
  #         echo REGISTERY_SECRET_GITHUB=$(echo -n '{"auths": {"${{ env.REGISTRY }}": {"username": "${{github.actor}}", "password": "${{ secrets.REGISTERY_PASSWORD }}"}}}' | base64 -w 0) >> $GITHUB_ENV

  #     - name: Run substitute-env-vars.sh script
  #       run: bash ./.github/scripts/substitute-env-vars.sh -d deployment -e "*/init-db.config.yaml"
  #       env:
  #         HOST: ${{ vars.HOST }}
  #         APPLICABLE_MIGRATE_IMAGE_NAME: ${{ needs.build_image.outputs.migrate_image_name }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #         HASURA_ADMIN_SECRET: ${{ secrets.HASURA_ADMIN_SECRET }}

  #     - name: Apply all Kubernetes manifests in deployment folder
  #       run: |
  #         bash ./.github/scripts/retry.sh "kubectl apply -f deployment/secrets/"
  #         bash ./.github/scripts/retry.sh "kubectl apply -f deployment/infrastructure/pg/"
  #         bash ./.github/scripts/retry.sh "kubectl apply -f deployment/infrastructure/hasura/"
