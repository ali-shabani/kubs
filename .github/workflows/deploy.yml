name: deploy
on: push

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build_db_migration_image:
    name: Build Database Migration Image
    runs-on: ubuntu-latest
    outputs:
      atlas_migration_image_name: ${{ steps.set_output.outputs.atlas_migration_image_name }}
    env:
      IMAGE_NAME: ${{ github.repository }}/db-migrate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env(ATLAS_SHA) from atlas.sum SHA
        run: |
          echo "ATLAS_SHA=$(sha256sum db/migrations/atlas.sum | awk '{print $1}')" >> "$GITHUB_ENV"

      - name: Create env(ATLAS_MIGRATION_IMAGE_NAME)
        run: |
          echo "ATLAS_MIGRATION_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.ATLAS_SHA }}" >> "$GITHUB_ENV"

      - name: Set output
        id: set_output
        run: echo "atlas_migration_image_name=${{ env.ATLAS_MIGRATION_IMAGE_NAME }}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if migration image has build once with the same SHA
        id: check_image
        run: |
          IMAGE_EXISTS=$(docker manifest inspect ${{ env.ATLAS_MIGRATION_IMAGE_NAME }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "image_exists=${IMAGE_EXISTS}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.image_exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        if: steps.check_image.outputs.image_exists == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ env.ATLAS_SHA }}

      - name: Build and push
        if: steps.check_image.outputs.image_exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./db
          file: ./db/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_hasura_migartion_image:
    name: Build Hasura Migration Image
    runs-on: ubuntu-latest
    outputs:
      hasura_migration_image_name: ${{ steps.set_output.outputs.hasura_migration_image_name }}
    env:
      IMAGE_NAME: ${{ github.repository }}/hasura-migrate
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set output
        id: set_output
        run: echo "hasura_migration_image_name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ env.IMAGE_TAG  }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./hasura
          file: ./hasura/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: deploy to cluster
    runs-on: ubuntu-latest
    needs: [build_db_migration_image, build_hasura_migartion_image]
    steps:
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - uses: actions/checkout@v4
      - name: deploy to cluster
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ vars.ARVAN_KUBE_VERSION }}

      - name: Apply kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.ARVAN_KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: create github secret registery
        run: |
          echo REGISTERY_SECRET_GITHUB=$(echo -n '{"auths": {"${{ env.REGISTRY }}": {"username": "${{github.actor}}", "password": "${{ secrets.REGISTERY_PASSWORD }}"}}}' | base64 -w 0) >> $GITHUB_ENV

      - name: Run substitute-env-vars.sh script
        run: bash ./.github/scripts/substitute-env-vars.sh -d deployment -e "*/init-db.config.yaml"
        env:
          HOST: ${{ vars.HOST }}
          DB_MIGRATION_IMAGE_NAME: ${{ needs.build_db_migration_image.outputs.atlas_migration_image_name }}
          HASURA_MIGRATION_IMAGE_NAME: ${{ needs.build_hasura_migartion_image.outputs.hasura_migration_image_name }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          HASURA_ADMIN_SECRET: ${{ secrets.HASURA_ADMIN_SECRET }}

      - name: Apply all Kubernetes manifests in deployment folder
        run: |
          bash ./.github/scripts/retry.sh "kubectl apply -f deployment/secrets/"
          bash ./.github/scripts/retry.sh "kubectl apply -f deployment/infrastructure/pg/"
          bash ./.github/scripts/retry.sh "kubectl apply -f deployment/infrastructure/hasura/"
